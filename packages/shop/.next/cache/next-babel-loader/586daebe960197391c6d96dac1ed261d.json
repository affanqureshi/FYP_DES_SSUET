{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\FYP_SOFTWARE_ENGINEERING\\\\FYP\\\\des\\\\packages\\\\shop\\\\containers\\\\Checkout\\\\Update\\\\UpdateAddress.tsx\";\n\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport * as Yup from 'yup';\nimport { withFormik, Form } from 'formik';\nimport { closeModal } from '@redq/reuse-modal';\nimport TextField from 'components/TextField/TextField';\nimport Button from 'components/Button/Button';\nimport { useMutation } from '@apollo/react-hooks';\nimport { UPDATE_ADDRESS } from 'graphql/mutation/address';\nimport { FieldWrapper, Heading } from './Update.style';\nimport { ProfileContext } from 'contexts/profile/profile.context'; // Shape of form values\n\n// Wrap our form with the using withFormik HoC\nvar FormEnhancer = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: function mapPropsToValues(props) {\n    return {\n      id: props.item.id || null,\n      name: props.item.name || '',\n      info: props.item.info || ''\n    };\n  },\n  validationSchema: Yup.object().shape({\n    name: Yup.string().required('Title is required!'),\n    info: Yup.string().required('Address is required')\n  }),\n  handleSubmit: function handleSubmit(values) {\n    console.log(values, 'values'); // do submitting things\n  }\n});\n\nvar UpdateAddress = function UpdateAddress(props) {\n  var isValid = props.isValid,\n      item = props.item,\n      values = props.values,\n      touched = props.touched,\n      errors = props.errors,\n      dirty = props.dirty,\n      handleChange = props.handleChange,\n      handleBlur = props.handleBlur,\n      handleReset = props.handleReset,\n      isSubmitting = props.isSubmitting;\n  var addressValue = {\n    id: values.id,\n    type: 'secondary',\n    name: values.name,\n    info: values.info\n  };\n\n  var _useContext = useContext(ProfileContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var _useMutation = useMutation(UPDATE_ADDRESS),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      addressMutation = _useMutation2[0],\n      data = _useMutation2[1].data;\n\n  var handleSubmit = function handleSubmit() {\n    var addressData;\n    return _regeneratorRuntime.async(function handleSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!isValid) {\n              _context.next = 7;\n              break;\n            }\n\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(addressMutation({\n              variables: {\n                addressInput: JSON.stringify(addressValue)\n              }\n            }));\n\n          case 3:\n            addressData = _context.sent;\n            console.log(addressData, 'address data');\n            dispatch({\n              type: 'ADD_OR_UPDATE_ADDRESS',\n              payload: addressValue\n            });\n            closeModal();\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return __jsx(Form, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, __jsx(Heading, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, item && item.id ? 'Edit Address' : 'Add New Address'), __jsx(FieldWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, __jsx(TextField, {\n    id: \"name\",\n    type: \"text\",\n    placeholder: \"Enter Title\",\n    error: touched.name && errors.name,\n    value: values.name,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  })), __jsx(FieldWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, __jsx(TextField, {\n    id: \"info\",\n    as: \"textarea\",\n    placeholder: \"Enter Address\",\n    error: touched.info && errors.info,\n    value: values.info,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  })), __jsx(Button, {\n    onClick: handleSubmit,\n    type: \"submit\",\n    title: \"Save Address\",\n    size: \"medium\",\n    fullwidth: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default FormEnhancer(UpdateAddress);","map":{"version":3,"sources":["E:/FYP_SOFTWARE_ENGINEERING/FYP/des/packages/shop/containers/Checkout/Update/UpdateAddress.tsx"],"names":["React","useContext","Yup","withFormik","Form","closeModal","TextField","Button","useMutation","UPDATE_ADDRESS","FieldWrapper","Heading","ProfileContext","FormEnhancer","mapPropsToValues","props","id","item","name","info","validationSchema","object","shape","string","required","handleSubmit","values","console","log","UpdateAddress","isValid","touched","errors","dirty","handleChange","handleBlur","handleReset","isSubmitting","addressValue","type","state","dispatch","addressMutation","data","variables","addressInput","JSON","stringify","addressData","payload"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\r\nimport * as Yup from 'yup';\r\nimport { withFormik, FormikProps, Form } from 'formik';\r\nimport { closeModal } from '@redq/reuse-modal';\r\nimport TextField from 'components/TextField/TextField';\r\nimport Button from 'components/Button/Button';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { UPDATE_ADDRESS } from 'graphql/mutation/address';\r\nimport { FieldWrapper, Heading } from './Update.style';\r\nimport { ProfileContext } from 'contexts/profile/profile.context';\r\n\r\n// Shape of form values\r\ninterface FormValues {\r\n  id?: number | null;\r\n  name?: string;\r\n  info?: string;\r\n}\r\n\r\n// The type of props MyForm receives\r\ninterface MyFormProps {\r\n  item?: any | null;\r\n}\r\n\r\n// Wrap our form with the using withFormik HoC\r\nconst FormEnhancer = withFormik<MyFormProps, FormValues>({\r\n  // Transform outer props into form values\r\n  mapPropsToValues: props => {\r\n    return {\r\n      id: props.item.id || null,\r\n      name: props.item.name || '',\r\n      info: props.item.info || '',\r\n    };\r\n  },\r\n  validationSchema: Yup.object().shape({\r\n    name: Yup.string().required('Title is required!'),\r\n    info: Yup.string().required('Address is required'),\r\n  }),\r\n  handleSubmit: values => {\r\n    console.log(values, 'values');\r\n    // do submitting things\r\n  },\r\n});\r\n\r\nconst UpdateAddress = (props: FormikProps<FormValues> & MyFormProps) => {\r\n  const {\r\n    isValid,\r\n    item,\r\n    values,\r\n    touched,\r\n    errors,\r\n    dirty,\r\n    handleChange,\r\n    handleBlur,\r\n\r\n    handleReset,\r\n    isSubmitting,\r\n  } = props;\r\n  const addressValue = {\r\n    id: values.id,\r\n    type: 'secondary',\r\n    name: values.name,\r\n    info: values.info,\r\n  };\r\n  const { state, dispatch } = useContext(ProfileContext);\r\n\r\n  const [addressMutation, { data }] = useMutation(UPDATE_ADDRESS);\r\n\r\n  const handleSubmit = async () => {\r\n    if (isValid) {\r\n      const addressData = await addressMutation({\r\n        variables: { addressInput: JSON.stringify(addressValue) },\r\n      });\r\n      console.log(addressData, 'address data');\r\n      dispatch({ type: 'ADD_OR_UPDATE_ADDRESS', payload: addressValue });\r\n      closeModal();\r\n    }\r\n  };\r\n  return (\r\n    <Form>\r\n      <Heading>{item && item.id ? 'Edit Address' : 'Add New Address'}</Heading>\r\n      <FieldWrapper>\r\n        <TextField\r\n          id='name'\r\n          type='text'\r\n          placeholder='Enter Title'\r\n          error={touched.name && errors.name}\r\n          value={values.name}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n        />\r\n      </FieldWrapper>\r\n\r\n      <FieldWrapper>\r\n        <TextField\r\n          id='info'\r\n          as='textarea'\r\n          placeholder='Enter Address'\r\n          error={touched.info && errors.info}\r\n          value={values.info}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n        />\r\n      </FieldWrapper>\r\n\r\n      <Button\r\n        onClick={handleSubmit}\r\n        type='submit'\r\n        title='Save Address'\r\n        size='medium'\r\n        fullwidth={true}\r\n      />\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default FormEnhancer(UpdateAddress);\r\n"]},"metadata":{},"sourceType":"module"}