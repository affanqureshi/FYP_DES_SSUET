{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\FYP_SOFTWARE_ENGINEERING\\\\FYP\\\\des\\\\packages\\\\shop\\\\containers\\\\Payment\\\\StripePaymentForm.tsx\";\n\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport { CardElement, injectStripe, Elements, StripeProvider } from 'react-stripe-elements';\nimport { useMutation } from '@apollo/react-hooks';\nimport { closeModal } from '@redq/reuse-modal';\nimport { GET_PAYMENT } from 'graphql/mutation/order';\nimport StripeFormWrapper, { Heading, FieldWrapper } from './StripePaymentForm.style';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nvar StripeForm = injectStripe(function (_ref) {\n  var getToken = _ref.getToken,\n      buttonText = _ref.buttonText,\n      stripe = _ref.stripe;\n\n  var _useContext = useContext(ProfileContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var handleSubmit = function handleSubmit() {\n    var _await$stripe$createT, token;\n\n    return _regeneratorRuntime.async(function handleSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(stripe.createToken({\n              name: 'Name'\n            }));\n\n          case 2:\n            _await$stripe$createT = _context.sent;\n            token = _await$stripe$createT.token;\n            getToken(token);\n\n            if (token) {\n              dispatch({\n                type: 'ADD_CARD',\n                payload: token.card\n              });\n              closeModal();\n            }\n\n            console.log(token, 'token');\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return __jsx(StripeFormWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, __jsx(Heading, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, \"Enter card info\"), __jsx(FieldWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, __jsx(CardElement, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }\n  })), __jsx(\"button\", {\n    type: \"button\",\n    onClick: handleSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, buttonText ? buttonText : 'Pay Now'));\n});\n\nvar StripePaymentForm = function StripePaymentForm(_ref2) {\n  var _ref2$item = _ref2.item,\n      price = _ref2$item.price,\n      buttonText = _ref2$item.buttonText;\n\n  var _useMutation = useMutation(GET_PAYMENT),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      getPayment = _useMutation2[0];\n\n  var sendTokenToServer = function sendTokenToServer(token) {\n    var payment_info;\n    return _regeneratorRuntime.async(function sendTokenToServer$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(getPayment({\n              variables: {\n                paymentInput: JSON.stringify({\n                  token: token,\n                  amount: price\n                })\n              }\n            }));\n\n          case 2:\n            payment_info = _context2.sent;\n            console.log(payment_info, 'payment_info');\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return true && __jsx(StripeProvider, {\n    apiKey: process.env.STRIPE_PUBLIC_KEY,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"example\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, __jsx(Elements, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, __jsx(StripeForm, {\n    getToken: function getToken(token) {\n      return sendTokenToServer(token);\n    },\n    buttonText: buttonText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }))));\n};\n\nexport default StripePaymentForm;","map":{"version":3,"sources":["E:/FYP_SOFTWARE_ENGINEERING/FYP/des/packages/shop/containers/Payment/StripePaymentForm.tsx"],"names":["React","useContext","CardElement","injectStripe","Elements","StripeProvider","useMutation","closeModal","GET_PAYMENT","StripeFormWrapper","Heading","FieldWrapper","ProfileContext","StripeForm","getToken","buttonText","stripe","state","dispatch","handleSubmit","createToken","name","token","type","payload","card","console","log","StripePaymentForm","item","price","getPayment","sendTokenToServer","variables","paymentInput","JSON","stringify","amount","payment_info","process","env","STRIPE_PUBLIC_KEY"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\r\nimport {\r\n  CardElement,\r\n  injectStripe,\r\n  Elements,\r\n  StripeProvider,\r\n  ReactStripeElements,\r\n} from 'react-stripe-elements';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { closeModal } from '@redq/reuse-modal';\r\nimport { GET_PAYMENT } from 'graphql/mutation/order';\r\nimport StripeFormWrapper, {\r\n  Heading,\r\n  FieldWrapper,\r\n} from './StripePaymentForm.style';\r\nimport { ProfileContext } from 'contexts/profile/profile.context';\r\ntype StripeFormProps = ReactStripeElements.InjectedStripeProps & {\r\n  getToken: any;\r\n  buttonText: string;\r\n};\r\nconst StripeForm = injectStripe(\r\n  ({ getToken, buttonText, stripe }: StripeFormProps) => {\r\n    const { state, dispatch } = useContext(ProfileContext);\r\n    const handleSubmit = async () => {\r\n      let { token } = await stripe.createToken({ name: 'Name' });\r\n      getToken(token);\r\n      if (token) {\r\n        dispatch({ type: 'ADD_CARD', payload: token.card });\r\n        closeModal();\r\n      }\r\n      console.log(token, 'token');\r\n    };\r\n    return (\r\n      <StripeFormWrapper>\r\n        <Heading>Enter card info</Heading>\r\n        <FieldWrapper>\r\n          <CardElement />\r\n        </FieldWrapper>\r\n        <button type=\"button\" onClick={handleSubmit}>\r\n          {buttonText ? buttonText : 'Pay Now'}\r\n        </button>\r\n      </StripeFormWrapper>\r\n    );\r\n  }\r\n);\r\ntype Item = {\r\n  item: {\r\n    price: any;\r\n    buttonText: string;\r\n  };\r\n};\r\nconst StripePaymentForm = ({ item: { price, buttonText } }: Item) => {\r\n  const [getPayment] = useMutation(GET_PAYMENT);\r\n  const sendTokenToServer = async (token: any) => {\r\n    const payment_info = await getPayment({\r\n      variables: { paymentInput: JSON.stringify({ token, amount: price }) },\r\n    });\r\n    console.log(payment_info, 'payment_info');\r\n  };\r\n\r\n  return (\r\n    process.browser && (\r\n      <StripeProvider apiKey={process.env.STRIPE_PUBLIC_KEY}>\r\n        <div className=\"example\">\r\n          <Elements>\r\n            <StripeForm\r\n              getToken={token => sendTokenToServer(token)}\r\n              buttonText={buttonText}\r\n            />\r\n          </Elements>\r\n        </div>\r\n      </StripeProvider>\r\n    )\r\n  );\r\n};\r\n\r\nexport default StripePaymentForm;\r\n"]},"metadata":{},"sourceType":"module"}